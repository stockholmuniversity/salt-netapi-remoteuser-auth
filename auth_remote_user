#!/usr/bin/env python3
'''
Ext filter that will validate POST requests and make sure REMOTE_USER is used
as username. This enables to use Saltstack's sharedsecret auth module and we
can use technologies as Kerberos GSSAPI to authenticate an API user to
Saltstack. For more information, visit:
https://github.com/stockholmuniversity/salt-netapi-remoteuser-auth
'''

import json
import os
import sys
import urllib.parse

import yaml
from su.logging import structured, logging  # noqa: F401


def update_indata_dict(indata_dict, remote_user, sharedsecret):
    ''' Always update username to REMOTE_USER. This will prevent a user to
        tamper with the username parameter.
    '''
    indata_dict.update(username=remote_user)
    indata_dict.update(password=sharedsecret)
    indata_dict.update(eauth='sharedsecret')


def main(stdin):
    ''' Take data on standard in and make sure we are setting username to
        REMOTE_USER.
    '''

    logger = logging.getLogger("auth_remote_user")
    logger.setLevel(logging.INFO)

    remote_user = os.environ.get('REMOTE_USER')
    shared_secret_config = os.environ.get('SHARED_SECRET_CONFIG')

    if remote_user is None or shared_secret_config is None:
        logger.error("Can't find required environment variables: {env}".format(
            env={
                "remote_user": remote_user,
                "shared_secret_config": shared_secret_config,
                }
            ))
        sys.exit(1)

    indata = stdin.read()

    yaml_data = {}
    try:
        with open(shared_secret_config, 'r') as stream:
            yaml_data = yaml.safe_load(stream)
    except (yaml.YAMLError, FileNotFoundError) as e:
        logging.exception(e)
        sys.exit(1)

    sharedsecret = yaml_data.get('sharedsecret')
    if sharedsecret is None:
        logging.error("Can't find sharedsecret")
        sys.exit(1)

    indata_dict = {}
    request_parameters = ""
    if os.environ.get('CONTENT_TYPE') == 'application/x-www-form-urlencoded':
        logging.debug("Handling a {} request" % os.environ.get('CONTENT_TYPE'))
        indata_dict = urllib.parse.parse_qs(indata)
        update_indata_dict(indata_dict, remote_user, sharedsecret)
        request_parameters = urllib.parse.urlencode(indata_dict, doseq=True)
    elif os.environ.get('CONTENT_TYPE') == 'application/json':
        logging.debug("Handling a {} request".format(
            os.environ.get('CONTENT_TYPE')
            ))
        indata_dict = None
        try:
            indata_dict = json.loads(indata)
        except json.decoder.JSONDecodeError as e:
            logging.exception(e)
            sys.exit(1)
        update_indata_dict(indata_dict, remote_user, sharedsecret)
        request_parameters = json.dumps(indata_dict)
    else:
        logging.error(
            "Unknown request with content_type={content_type}".format(
                content_type=os.environ.get('CONTENT_TYPE'),
                ))
        sys.exit(1)

    print(request_parameters)


if __name__ == "__main__":
    main(sys.stdin)
